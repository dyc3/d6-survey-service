openapi: 3.0.0
info:
  title: Survey Service
  version: "1.0"
paths:
  /api/status:
    summary: Get the status of the service
    get:
      responses:
        "200":
          description: Service is up and running
          content:
            text/plain:
              schema:
                type: string
  /api/user/register:
    summary: Register a new user
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserLoginParams"
      responses:
        "201":
          description: Successfully registered new user, returns JWT token
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                required:
                  - token
  /api/user/login:
    summary: Log in an existing user
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserLoginParams"
      responses:
        "200":
          description: Successfully logged in user, returns JWT token
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                required:
                  - token
  "/api/survey/create":
    post:
      summary: Create a new survey
      security:
        - JWT: []
      responses:
        "201":
          description: The survey was created. Returns the survey object.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: number
                  title:
                    type: string
                  description:
                    type: string
                  published:
                    type: boolean
                  owner_id:
                    type: number
                  questions:
                    type: array
                    items:
                      $ref: "#/components/schemas/SurveyQuestion"
                required:
                  - id
                  - title
                  - description
                  - published
                  - owner_id
                  - questions
  "/api/survey/{survey}":
    parameters:
      - $ref: "#/components/parameters/survey"
    get:
      summary: Get a survey.
      description: >
        Get a survey. If the survey is not published, only the owner can
        get it. If the survey is published, anyone can get it.
      parameters:
        - $ref: "#/components/parameters/ifmodifiedsince"
        - $ref: "#/components/parameters/ifnonematch"
      security:
        - JWT: []
        - {}
      responses:
        "200":
          description: 200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: number
                  title:
                    type: string
                  description:
                    type: string
                  published:
                    type: boolean
                  owner_id:
                    type: number
                  questions:
                    type: array
                    items:
                      $ref: "#/components/schemas/SurveyQuestion"
                required:
                  - id
                  - title
                  - description
                  - published
                  - owner_id
                  - questions
        "403":
          description: Forbidden, survey is not published and you are not the owner
        "404":
          description: Survey not found
    patch:
      summary: Update a survey
      description: >
        Update a survey. Only the owner of the survey can update it. If the
        survey is published, it cannot be updated unless it is unpublished
        first.


        The request body can contain any of the top level fields, but they are not required. If a field is not present, it will not be updated.
      parameters:
        - $ref: "#/components/parameters/ifunmodifiedsince"
        - $ref: "#/components/parameters/ifmatch"
      security:
        - JWT: []
      responses:
        "200":
          description: The survey was updated
        "403":
          description: 403 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                required:
                  - message
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                description:
                  type: string
                title:
                  type: string
                published:
                  type: boolean
                questions:
                  type: array
                  items:
                    $ref: "#/components/schemas/SurveyQuestion"
  /api/user/surveys:
    summary: Get all surveys owned by the user
    get:
      security:
        - JWT: []
      responses:
        "200":
          description: List of surveys
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ListedSurvey"
  "/api/survey/{survey}/respond":
    parameters:
      - $ref: "#/components/parameters/survey"
      - in: query
        name: responder
        required: false
        description: The UUID of the responder
        schema:
          type: string
          format: uuid
    post:
      summary: Submit a survey response
      description: >
        Submit a survey response. The request body is a JSON object with
        the question IDs as keys and the response as the value.
      responses:
        "200":
          description: Survey response has been saved
          content:
            application/json:
              schema:
                type: object
                properties:
                  responder_uuid:
                    type: string
                    format: uuid
                required:
                  - responder_uuid
      requestBody:
        $ref: "#/components/requestBodies/SurveyResponse"
    patch:
      summary: Update a survey response
      description: >
        Update a survey response. The request body is a JSON object with
        the question IDs as keys and the response as the value.

        The `responder` query parameter is required.
      parameters:
        - $ref: "#/components/parameters/ifunmodifiedsince"
        - $ref: "#/components/parameters/ifmatch"
      responses:
        "200":
          description: Updated survey response has been saved
      requestBody:
        $ref: "#/components/requestBodies/SurveyResponse"
    get:
      summary: Get a survey response
      parameters:
        - $ref: "#/components/parameters/ifmodifiedsince"
        - $ref: "#/components/parameters/ifnonematch"
      responses:
        "200":
          description: Response exists, here it is
          content:
            application/json:
              schema:
                type: object
                properties:
                  survey_id:
                    type: number
                  responder_uuid:
                    type: string
                  content:
                    type: object
                    additionalProperties:
                      $ref: "#/components/schemas/Response"
                  created_at:
                    type: string
                  updated_at:
                    type: string
                required:
                  - survey_id
                  - responder_uuid
                  - content
                  - created_at
                  - updated_at
components:
  parameters:
    survey:
      name: survey
      in: path
      required: true
      description: The survey ID
      schema:
        type: string
    ifmodifiedsince:
      name: If-Modified-Since
      in: header
      required: false
      description: The date the client thinks the resource was last modified
      schema:
        type: string
        format: date-time
        example: Wed, 08 Mar 2023 07:28:00 GMT
    ifnonematch:
      name: If-None-Match
      in: header
      required: false
      description: The ETag of the resource
      schema:
        type: string
    ifunmodifiedsince:
      name: If-Unmodified-Since
      in: header
      required: false
      description: The date the client thinks the resource was last modified
      schema:
        type: string
        format: date-time
        example: Wed, 08 Mar 2023 07:28:00 GMT
    ifmatch:
      name: If-Match
      in: header
      required: false
      description: The ETag of the resource
      schema:
        type: string
  securitySchemes:
    JWT:
      type: http
      scheme: Bearer
      bearerFormat: JWT
  requestBodies:
    SurveyResponse:
      content:
        application/json:
          schema:
            type: object
            additionalProperties:
              $ref: "#/components/schemas/Response"
  schemas:
    UserLoginParams:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
      required:
        - username
        - password
    ListedSurvey:
      type: object
      properties:
        id:
          type: number
        title:
          type: string
        description:
          type: string
        published:
          type: boolean
        owner_id:
          type: number
      required:
        - id
        - title
        - description
        - published
        - owner_id
    SurveyQuestion:
      type: object
      properties:
        uuid:
          type: string
        required:
          type: boolean
        question:
          $ref: "#/components/schemas/Question"
    Question:
      type: object
      properties:
        type:
          type: string
          enum:
            - Text
            - Rating
            - MultipleChoice
        content:
          oneOf:
            - $ref: "#/components/schemas/QText"
            - $ref: "#/components/schemas/QRating"
            - $ref: "#/components/schemas/QMultipleChoice"
    QText:
      type: object
      properties:
        prompt:
          type: string
        description:
          type: string
        multiline:
          type: boolean
    QRating:
      type: object
      properties:
        prompt:
          type: string
        description:
          type: string
        max_rating:
          type: integer
    QMultipleChoice:
      type: object
      properties:
        prompt:
          type: string
        description:
          type: string
        multiple:
          type: boolean
        choices:
          type: array
          items:
            $ref: "#/components/schemas/Choice"
    Choice:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
        text:
          type: string
    Response:
      type: object
      properties:
        type:
          type: string
          enum:
            - Text
            - Rating
            - MultipleChoice
        content:
          oneOf:
            - $ref: "#/components/schemas/RText"
            - $ref: "#/components/schemas/RRating"
            - $ref: "#/components/schemas/RMultipleChoice"
    RText:
      type: object
      properties:
        text:
          type: string
    RRating:
      type: object
      properties:
        rating:
          type: integer
    RMultipleChoice:
      type: object
      properties:
        selected:
          type: array
          items:
            type: string
            format: uuid
